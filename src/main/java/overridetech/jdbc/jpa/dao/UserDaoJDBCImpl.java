package overridetech.jdbc.jpa.dao;

import overridetech.jdbc.jpa.model.User;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserDaoJDBCImpl implements UserDao {

    private final Connection connection;

    public UserDaoJDBCImpl(Connection connection) {
        this.connection = connection;
    }

    public void createUsersTable() {
        executeStatement("create table if not exists users (id bigint primary key generated by default as identity," +
                " name varchar(255) not null," +
                " lastname varchar(255)," +
                " age smallint)");
    }

    public void dropUsersTable() {
        executeStatement("drop table if exists users");
    }

    public void saveUser(String name, String lastName, byte age) {
        String comma = "', '";
        executeStatement("insert into users (name, lastname, age) values ('"
                + name
                + comma
                + lastName
                + comma
                + age
                + "')");
    }

    public void removeUserById(long id) {
        executeStatement("delete from users where id = " + id + "");
    }

    public List<User> getAllUsers() {
        try (Statement statement = connection.createStatement()) {
            ResultSet resultSet = statement.executeQuery("select * from users");
            List<User> userList = new ArrayList<>();
            while (resultSet.next()) {
                Long id = resultSet.getLong("id");
                String name = resultSet.getString("name");
                String lastName = resultSet.getString("lastname");
                Byte age = resultSet.getByte("age");
                User user = new User(id, name, lastName, age);
                userList.add(user);
            }
            return userList;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void cleanUsersTable() {
        executeStatement("truncate table users");
    }

    private void executeStatement(String sql) {
        try (Statement statement = connection.createStatement()) {
            statement.execute(sql);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
